/******************************************************************************
* File Name:   ring_buffer.h
*
* Description: This is the source code for the XMC MCU: UART Shell Example for
*              ModusToolbox. This file is the public interface of ring_buffer.c
*              source file.
*
* Related Document: See README.md
*
******************************************************************************
*
* Copyright (c) 2015-2024, Infineon Technologies AG
* All rights reserved.
*
* Boost Software License - Version 1.0 - August 17th, 2003
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*
*****************************************************************************/

#ifndef RING_BUFFER_H
#define RING_BUFFER_H

#include <stdint.h>
#include <stdbool.h>

/*******************************************************************************
* Macros
*******************************************************************************/
#define RING_BUFFER_DEF(x, sz)\
    uint8_t x##_data[sz];\
    ring_buffer_t x = {\
      .buffer = x##_data,\
      .head = 0,\
      .tail = 0,\
      .len = sz\
    }

/* Ringbuffer API return values */
#define RING_BUFFER_FULL        true
#define RING_BUFFER_NOT_FULL    false
#define RING_BUFFER_EMPTY       true
#define RING_BUFFER_NOT_EMPTY   false
#define RING_BUFFER_OK           0
#define RING_BUFFER_FULL_ERROR  -1
#define RING_BUFFER_EMPTY_ERROR -2

/*******************************************************************************
* Typedefs
*******************************************************************************/
typedef struct ring_buffer
{
    uint8_t *buffer;
    volatile uint32_t head;
    volatile uint32_t tail;
    const uint32_t len;
} ring_buffer_t;

/*******************************************************************************
* Function prototypes
*******************************************************************************/
uint32_t ring_buffer_avail(ring_buffer_t *const rb);
int32_t ring_buffer_put(ring_buffer_t *const rb, uint8_t c);
int32_t ring_buffer_get(ring_buffer_t *const rb, uint8_t *const c);

#endif

/* [] END OF FILE */
